# 作业回顾

# 需求：编写一段Python代码，生成一个随机的4位验证码
# 提前：定义一个字符串
str1="234567689abcdefghijkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"

# 编写Python代码：
"""
1.思考：如果只生成4个字符的验证码，如何保证从字符串中只读取4次（while循环、for循环）
2.如果随机的从str1字符中读取4个字符串？ random.choice() 生成随机数
3.如何从字符串中提取出某个字符 使用索引下标，str1[索引下标]
"""

import random


# 1.定义一个字符串
str1="234567689abcdefghijkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
code = ""
# 2.编写循坏，只循环4次
for i in range(4):  # 0 1 2 3
    # 3.随机获取str1中的某个字符
    index = random.randint(0,len(str1)-1)   # 索引下标不能超过字符串的长度
    # 4.将随机获取的字符拼接到code中
    code += str1[index]     # code = code1 + code2
# 5.打印4位随机验证码
print(code)



# 一、函数的作用及其使用步骤
# 1.函数的作用：封装代码，提高代码的复用性

# 2.函数的主要作用：
"""
1.模块化编程：将复杂的程序分解为多个小的函数，每个函数只做一件事情
2.提高代码的复用性
"""
# 3.函数的定义：
"""函数是一个被命名的、独立的、完成特定功能的代码块，其可能给调用它的程序一个返回值"""
"""
def 函数名(参数):
    函数体
    ...
    return 返回值
"""
# 函数的调用：'''函数名(参数)'''
# 注意事项：1.不同的需求，参数可有可无。2.在Python中，函数必须先定义后使用

'''
def func(name):
    ...
    函数体代码
    return 返回值


func()
'''
# 4.引入函数

# 案例1：写一个打招呼程序，用于实现向同事打招呼的功能
'''
#见到同事老张
# print('您好')
#见到同事老李
# print('您好')
#见到同事老王
# print('您好')
以上代码虽然可以完成打招呼程序，但重复性代码太多
'''

# 案例2：定义一个打招呼函数，专门用于实现向同事打招呼的功能
# 1.封装一个函数greet()
def greet():
    print('您好')

# 2.调用函数
#见到同事老张
greet()
#见到同事老李
greet()
#见到同事老王
greet()


# 案例3：升级案例2函数，可以实现向不同人打不同的招呼
# 1.封装一个函数greet()， 定义一个参数name
# 2.调用函数
def greet(name):
    print(f'{name},您好')

# 2.调用函数
#见到同事老张
greet('老张')
#见到同事老李
greet('老李')
#见到同事老王
greet('老王')


# 案例4：函数的设计原则“高内聚、低耦合”，函数执行完毕后，应该主动把函数返回给调用处，而不应该都交由print()等函数直接输出

# 1.封装一个函数greet()
def greet(name):
    return name + ',您好'
# 2.调用函数
#见到同事老张
print(greet('老张'))
#见到同事老李
print("\033[0;31;40m\t" + greet('老李') + "\033[0m")    # 使用ANSI转义序列设置文本颜色和样式，这里设置为红色文本，黑色背景
#见到同事老王
print("\033[0;36;40m\t" + greet('老王') + "\033[0m")


# 5. return返回值