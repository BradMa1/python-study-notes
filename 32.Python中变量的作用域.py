# 一、变量的作用域
# 1.变量的作用域
"""变量的作用域指的是变量的作用范围（变量在哪里可用，在哪里不可用），主要分为两类：局部变量、全局变量"""

# 2.局部变量与全局变量
"""在Python中，定义在函数外部的变量就称之为全局变量;而定义在函数内部的变量就称之为局部变量"""
# 定义在函数外部的变量(全局变量)
num = 10
# 定义一个函数
def func():
    # 函数体代码
    # 定义在函数内部的变量（局部变量）
    i = 1


# 3.变量作用域的作用范围
"""
全局变量：在整个程序范围内都可以使用
局部变量:在函数的调用过程中，开始定义，函数运行过程中生效，函数执行完毕后小销毁
"""
# 3.1全局变量
str1 = 'hello'
# 定义一个函数
def func():
    # 在函数内部调用全局变量str1
    print(f'在局部作用域中调用str1变量：{str1}')


# 直接调用全局变量str1
print(f'在全局作用域中调用str1变量：{str1}')
# 调用func函数
func()


# 3.2局部变量
# 定义一个函数
def func():
    # 在函数内部定义一个局部变量
    num = 10
    print(f'在局部作用域中调用num局部变量：{num}')


# 调用func函数
func()

# 在全局作用域中调用num局部变量
print(f'在全局作用域中调用num局部变量：{num}')  #   NameError: name 'num' is not defined（计算机的垃圾回收机制）
                                              #   在函数内部定义的局部变量，在函数执行完毕后，自动销毁，所以无法在函数外部调用


# 4.global 关键字
# 思考：如果一个数据，在函数A和函数B中都要使用，那么如何解决？----可以将这个数据储存在全局变量里

# 定义全局变量
info = []
# 定义funcA函数
def funcA():
    # 向info全局变量中添加数据
    info.append({...})


# 定义funcB函数
def funcB():
    # 共享全局作用域中的全局变量info
    for i in info:
        ...

# 问题：能否在局部作用域中对全局变量进行修改？----可以

# 定义全局变量num = 10
num = 10
# 定义一个函数func
def func():
    # 尝试在局部作用域中修改全局变量num的值
    num = 20


# 调用函数func
func()
# 尝试访问全局变量num
print(f'全局变量num的值：{num}')    # 输出：全局变量num的值：10

# 最终结果：由运行结果可知，在函数体内部，理论上无法对全局变量进行修改，如果一定要修改，必须使用global关键字。

"""global关键字的作用：将局部变量变成全局变量"""

# 定义全局变量num = 10
num = 10
# 定义一个函数func
def func():
    # 尝试在局部作用域中修改全局变量num的值
    global num
    num = 20


# 调用函数func
func()
# 尝试访问全局变量num
print(f'全局变量num的值：{num}')    # 输出：全局变量num的值：20


# 二、多函数之间数据的共享
# 定义全局变量
info = []

# 定义funcA函数：向全局变量中添加信息
def funcA():
    # 使用gglobal声明全局变量
    global  info
    # 向info全局变量中添加数据
    info.append({...})


# 定义funcB函数：查询功能，需要共享全局作用域中的通讯录讯息
def funcB():
    # 共享全局作用域中的全局变量info
    for i in info:
        ...


# 三、把函数的返回值作为另外一个函数的参数
def test1():
    return 50


def test2(num):
    print(num)


# 1.保存函数test1的返回值
result = test1()


# 2.将函数返回值所在变量作为参数传递到test2函数
test2(result)   # 50


# 四、函数的参数进阶
# 1.函数的参数
""""
在函数定义与调用时，可以根据需求来实现参数的传递。在Python中，函数的参数一共有两种形式：形参、实参

形参：在函数定义时，所编写的参数就称之为形式参数
实参：在函数调用时，所传递的参数就称之为实际参数
"""
def greet(name):        #   name就是在函数greet定义时所编写的参数(形参)
    return name + ',您好'


# 调用函数
name = '老王'
greet(name)   #   '老王'就是在函数greet调用时传递的参数(实参)  

"""
注意：虽然在函数传递时，喜欢使用相同的函数名称作为参数名称，但是两者的作用范围是不同的。
      name = '老王'，代表实参。其是全局变量；而greet(name)函数中的name实际是在函数定义时才声明的变量，所以其实一个局部变量
"""

# 2.函数的参数类型
# 2.1位置参数
""""理论上，在函数定义时可以为其定义多个参数。但是在函数调用时，我们也应该传递多个参数，而且正常情况下，其要一一对应"""
def user_info(name, age, address):
    print(f'我的名字叫{name}，今年{age}岁了，住在{address}')


# 调用函数
user_info('Tom', 23, '云南') 

# 注意：位置参数强调的是参数传递的位置必须一一对应，不能颠倒

# 2.2 关键词参数（Python特有）
"""函数调用，通过“键=值”形式加以指定。可以让函数更加清晰、容易使用，同时也清除了参数的顺序需求"""
def user_info(name, age, address):
    print(f'我的名字叫{name}，今年{age}岁了，住在{address}')


# 调用函数(使用关键词参数)
user_info(name='Tom', address='云南', age=23)   # 注意：顺序可以颠倒
