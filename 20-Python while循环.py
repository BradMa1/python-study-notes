# 练习题1：
# 需求：输入三角形的三边，如果两边的长度大于第三边，则代表是一个合法三角形

a = int(input('请输入三角形的第一条边的长度：'))    #提示用户输入边长
b = int(input('请输入三角形的第二条边的长度：'))
c = int(input('请输入三角形的第三条边的长度：'))
if (a + b > c) and (a + c > b) and (b + c > a):
    print('是合法三角形')
else:
    print('不是合法三角形')


# 练习题2：求世界杯小组赛的总成绩
'''
需求：世界杯案例，世界杯小组赛的比赛规则是我们的球队与其他三支球队进行比赛，然后根据总成绩（积分）确定出线资格。
小组赛球队实力已知（提示用户输入各球队实力），我们通过一个数字表示。如果我们赢1局得3分，平1局得1分，输1局得0分，
最终求球队总成绩
'''
a = int(input('请输入我们球队的实力值：'))
b = int(input('请输入1号球队的实力值：'))
c = int(input('请输入2号球队的实力值：'))
d = int(input('请输入3号球队的实力值：'))

# 求每次比赛的成绩
avsb = (a > b) * 3 + (a == b) * 1 + (a < b) * 0 #布尔类型参与运算会自动进行类型转换（True == int(True) == 1, False == int(False) == 0） 
avsc = (a > c) * 3 + (a == c) * 1 + (a < c) * 0
avsd = (a > d) * 3 + (a == d) * 1 + (a < d) * 0

# 总成绩
score = avsb + avsc + avsd

# 输出总成绩
print(f'我们球队总成绩为：{score}')





# 一. while循环基本语法及其应用：
# 1. while循环的基本语法：

'''
1. 定义一个计数器（初始化一个计数器）
i = 0 或 1  # 在计算机程序中，计数器大部分都是从0开始的

2.编写while循环结构
while 循环条件(判断 计数器 是否达到了目标位置)：
    循环体1
    循环体2
    ...

3.在循环内更新计数器
i = i + 1或 i += 1

'''

# while 循环入门案例：
# 使用while循环，循环输出100遍"hello world"

# 初始化计数器
i = 0

# 编写循环条件（判断计数器是否达到了100）
while i < 100:
    print(f'{i + 1}hello world')
    # 在循环体內部更新计数器
    i += 1
while i < 100:
    print(f'{i + 1}hello world')
    i += 1


# 2.while循环的执行流程
# 建议使用Debug调试工具，察看while循环的执行流程


# 3. while循环案例

# 案例1：使用while循环求 1 ~ 100 的和
""" 
分析：定义一个while循环，计算 1 + 2 + 3 + 4 + 5...+ 100 的值,结果为5050
"""

i = 1   # 初始化计数器
sum = 0 # 初始化累加值（定义变量，用于接受最后的运算结果）
while i <= 100:
    sum += i
    i += 1  # 更新计数器
print(f'1-100累加的结果为：{sum}')

# 案例2：使用while循环求 1 ~ 100 中偶数的和
"""
分析：偶数（能被2整除的数），数学中可以使用 2n 来表示偶数
      在while循环中还可以结合if条件语句，进一步简化代码
"""

i = 1 
sum = 0 


while i <= 100:
    if i % 2 == 0:  # 判断i是否能被2整除
        sum += i
    i += 1
print(f'1-100中偶数累加的结果为：{sum}')


# 二、循环中的两大关键词：
# 两大关键词：
'''
    1. break：代表终止整个循环结构，跳出循环
    2. continue：代表终止当前循环，继续下一次循环（跳过本次循环，直接进入下一次循环）
'''    
# 1. break 关键字：
"""
举例：一共吃5个苹果，吃完第一个，吃第二个...
情况一：如果吃的过程中，吃完第三个吃饱了，则不需要再吃第4个和第5个苹果，即是吃苹果的动作停止，这里就是break控制循环流程，即中止此循环

"""
# 初始化计数器
i = 1
# 编写循环条件
while i <= 5:
    # 当变量i == 4时，终止循环
    if i == 4:
        print('我已经吃饱了，实在吃不下了...')
        break

    print(f"正在吃第{i}个苹果")
    # 更新计数器
    i += 1


# 2. continue 关键字：
# 如果在使用continue时，不手工更新计数器，则循环将一直执行下去（死循环）
'''
情况二：如果吃的过程中，吃到第3个，发现这个苹果是坏的，则直接跳过这个坏苹果，继续吃第4个和第5个苹果，这里就是continue控制循环流程，
即跳过本次循环，继续下一次循环

'''
# 初始化计数器
i = 1
# 编写循环条件
while i <= 5:
    if i == 3:
        # 手工更新计数器
        i += 1
        print('这个苹果是坏的，不要吃...') 
        continue
    print(f'正在吃第{i}个苹果')  
    #更新计数器
    i += 1


# 三、死循环
'''
在编程中一个靠自身无法终止的程序称为死循环
在Python中，可以用while True 来模拟死循环
'''
# while True:
#     print('我是一个死循环')




# while循环案例：猜数字
'''
需求：计算机从1~10之间，随机生成一个数字,然后提示输入数字，如果我们输入的数字与随机数相等，则提示恭喜你答对了
如果输入的数字比随机数大，则提示太大了，如果输入的数字比随机数小，则提示太小了，一共有3次机会
'''
import random

# 定义一个计数器
i = 0
secretNum = random.randint(1,10)    #生成1~10之间的随机数
# 编写循环条件
while i < 3:
    userNum = int(input('请输入您猜的数字（范围1~10之间）：'))
    if userNum == secretNum:
        print('恭喜您猜对了！')
        break
       
    elif userNum > secretNum:
        print('猜大了')
      
    elif userNum < secretNum:
        print('猜小了')
    

    # 更新计数器
    i += 1
    
print('您已经猜了3次，游戏结束！')


# 四、while循环嵌套
# 1. 循环嵌套的引入

# 初始化外层计数器
j = 1
# 编写外层循环条件
while j <= 3:
    # 初始化计数器
    i = 1
    # 编写循环条件
    while i <= 3:
        print('重要的事情说3遍')
        # 更新计数器
        i += 1
    print('下班打游戏')
    # 更新计数器
    j += 1

# 2. 循环嵌套的基本语法
'''所谓的while嵌套循环就是在while循环的基础上，把循环体代码更换为一层while循环，就组成了while嵌套循环
   嵌套循环的执行顺序：外层循环执行一次，内层循环执行所有次
   嵌套循环的总次数：外层循环次数 * 内层循环次数
'''

# 第一步：初始化外层循环计数器
i = 1

# 第二步：编写外层的循环条件
while i <= 3:
    # 第四步：初始化内层循环计数器
    j = 1
    # 第五步：编写内层的循环条件
    while j <= 3:
        '循环体代码'
        # 第六步：更新内层循环的计数器
        j += 1

    # 第三步：更新外层循环的计数器
    i += 1



# 五、案例
# 案例1：打印5行5列的正方形，单元格中使用*进行填充
'''
方法一：直接print打印
print('* * * * *')
print('* * * * *')
print('* * * * *')
print('* * * * *')
print('* * * * *')  
'''

'''
方法二：使用单层while循环
i = 1
while i <= 5:
    print('* * * * *')
    i += 1
'''

'''
方法三：使用单层while循环 + 运算符
i = 1
while i <= 5:
    print('* ' * 5)
    i += 1
'''

'''
方法四：使用while循环嵌套
i = 1
while i <= 5:
    j = 1
    while j <= 5:
        print('*  ', end='')
        j += 1
    print('')  # 换行
    i += 1
'''

# 案例2：用*打印直角三角形，特征：一共有5行
i = 1
while i <=5:
    j = 1
    while j <= i:
        print('*  ', end='')
        j += 1
    print('')  # 换行
    i += 1


# 案例3：打印9x9乘法表
i = 1
while i <=9:
    j = 1
    while j <= i:
        print(f'{j} x {i} = {i*j}', end='\t')
        j += 1
    print('')  # 换行
    i += 1